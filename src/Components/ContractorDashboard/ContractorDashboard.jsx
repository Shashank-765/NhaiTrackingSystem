import React, { useState, useEffect } from "react";
import "./ContractorDashboard.css";
import invoice from "../../Images/invoice.png";
import { useAuth } from "../../context/AuthContext";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import ContractorBatchEditForm from "../ContractorBatchEditForm/ContractorBatchEditForm";
import Invoice from "../Invoice/Invoice";
import infoIcon from "../../Images/info-icon.png";
import InfoModal from "../InfoModal/InfoModal";
import { useNavigate } from 'react-router-dom';

const ContractorDashboard = () => {
  const [batches, setBatches] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const { user } = useAuth();
  const [contractorBatchForm, setContractorBatchForm] = useState(false);
  const [selectedInvoice, setSelectedInvoice] = useState(null);
  const [selectedBatchInfo, setSelectedBatchInfo] = useState(null);
  const [refreshTrigger, setRefreshTrigger] = useState(false);

  const navigate = useNavigate();

  const handleInfoClick = (batchId) => {
    navigate(`/tracker/${batchId}`);
  };

  const fetchBatches = async () => {
    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_URL}/api/${
          import.meta.env.VITE_API_VERSION
        }/batches`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );

      const data = await response.json();

      if (data.success) {
        // Filter batches for the current contractor
        console.log("Batches fetched successfully:", data.data);
        console.log("Current user ID:", user);
        const contractorBatches = data.data.filter(
          (batch) => batch.contractorId === user.id && batch.status === "approved"
        );
        setBatches(contractorBatches);
        console.log("Filtered batches for contractor:", contractorBatches);
      } else {
        toast.error("Error fetching contracts");
      }
    } catch (error) {
      toast.error("Server error. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };
  const handleContractorBatchForm = async (batch) => {
    setContractorBatchForm(batch || false);
    if (!batch) {
      // Form was closed, refresh the data
      await fetchBatches();
    }
  };
  const refreshBatchInfo = () => setRefreshTrigger(prev => !prev);
  useEffect(() => {
    fetchBatches();
  }, [user.id]);

  const filteredBatches = batches.filter(
    (batch) =>
      batch.contractId?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      batch.contractTitle?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      batch.agencyName?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleInvoiceClick = (batch) => {
    // if (batch.workApproved && batch.workStatus === "completed" && batch.adminInvoiceDownloaded) {
    if (batch.adminInvoiceDownloaded) {
      setSelectedInvoice(batch);
    } else {
      toast.warning(
        "Invoice will be generated by admin after work completion and approval",{
          autoClose: 1000,
        }
      );
    }
  };

  return (
    <div className="contractor-dashboard">
      <div className="dashboard-header">
        <h1>Contractor Dashboard</h1>
      </div>
      <div className="batch-section">
        <div className="batch-section-heading">
          <h2>Contract Overview</h2>
          <div className="search-create">
            <input
              type="text"
              placeholder="Search in Contracts"
              className="batch-searchbox"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        <div className="table-wrapper">
          <table className="batch-table" cellSpacing={0}>
            <thead>
              <tr>
                <th>ContractId</th>
                <th>Title</th>
                <th>Agency Name</th>
                <th>Admin</th>
                {/* <th>Bid Amount</th> */}
                <th>Contractor <br /> Amount</th>
                <th>Duration</th>
                <th>Status</th>
                <th>Invoice</th>
                <th>Pay Info</th>
              </tr>
            </thead>
            <tbody>
              {isLoading ? (
                <tr>
                  <td colSpan="8" style={{ textAlign: "center" }}>
                    Loading...
                  </td>
                </tr>
              ) : filteredBatches.length === 0 ? (
                <tr>
                  <td colSpan="8" style={{ textAlign: "center" }}>
                    No contracts found
                  </td>
                </tr>
              ) : (
                filteredBatches.map((batch) => (
                  <tr key={batch._id}>
                    <td>{batch.contractId}</td>
                    <td>{batch.contractTitle}</td>
                    <td>{batch.agencyName}</td>
                    <td>{batch.adminName || "Admin"}</td>
                    {/* <td>₹{batch.bidValue}</td> */}
                    <td>₹{batch.contractorValue || "N/A"}</td>
                    <td>{batch.bidDuration}</td>
                    <td>
                      <button
                        type="button"
                        className="edit-btn"
                        onClick={() => handleContractorBatchForm(batch)}
                        disabled={batch.workStatus === "completed"}
                        style={{
                          opacity: batch.workStatus === "completed" ? 0.7 : 1,
                          cursor:
                            batch.workStatus === "completed"
                              ? "not-allowed"
                              : "pointer",
                        }}
                      >
                        Edit
                      </button>
                    </td>
                    <td>
                      <img
                        src={invoice}
                        alt="invoice"
                        className="invoice-icon"
                        style={{
                          opacity: batch.workApproved ? 1 : 0.7,
                          cursor:
                            batch.workApproved ? "pointer" : "not-allowed",
                        }}
                        onClick={() => handleInvoiceClick(batch)}
                      />
                    </td>
                    <td>
                      <img
                        src={infoIcon}
                        alt="info"
                        className="info-icon"
                        onClick={() => handleInfoClick(batch._id)}
                        style={{ cursor: "pointer" }}
                      />
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* invoice modal */}
      {selectedInvoice && (
        <div
          className="invoice-modal"
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgba(0,0,0,0.5)",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            zIndex: 1000,
          }}
        >
          <div
            style={{
              backgroundColor: "white",
              padding: "20px",
              borderRadius: "8px",
              maxHeight: "90vh",
              overflowY: "auto",
              position: "relative",
            }}
          >
            <button
              onClick={() => setSelectedInvoice(null)}
              style={{
                position: "absolute",
                right: "10px",
                top: "10px",
                padding: "5px 10px",
                backgroundColor: "#ff4444",
                color: "white",
                border: "none",
                borderRadius: "4px",
                cursor: "pointer",
              }}
            >
              Close
            </button>
            <Invoice batch={selectedInvoice} />
          </div>
        </div>
      )}
      {contractorBatchForm && (
        <ContractorBatchEditForm
          batch={contractorBatchForm}
          handleContractorBatchForm={handleContractorBatchForm}
        />
      )}

      {/* Info Modal */}
      {selectedBatchInfo && (
        <InfoModal
          batch={selectedBatchInfo}
          onClose={() => setSelectedBatchInfo(null)}
          refreshTrigger={refreshTrigger}
        />
      )}
      <ToastContainer autoClose={1000} />
    </div>
  );
};

export default ContractorDashboard;
